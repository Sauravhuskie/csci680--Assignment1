# -*- coding: utf-8 -*-
"""Saurav_680-Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11KWQ0LKFeUkv8NrYms_mzLf877f2tmlW

# **CSCI 680 - k13: Asssignment 1**

**References**

1.
https://cmdlinetips.com/2019/10/how-to-make-a-plot-with-two-different-y-axis-in-python-with-matplotlib/#:~:text=The%20way%20to%20make%20a,by%20updating%20the%20axis%20object.

2.https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html

3.https://www.kite.com/python/answers/how-to-remove-the-frame-from-a-matplotlib-legend-in-python

4.https://stackoverflow.com/questions/11423369/matplotlib-legend-circle-markers

### **Question 1**

step 1: Importing necessary libraries
"""

# importing numpy, matplotlib, and pandas

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.lines as line

"""step 2: Replicating data from the website graph and creating pandas dataframe with it."""

#creating numpy array
my_array = np.array([[1999,18.079,5427.0],
                     [2000,18.594,5688.0],
                     [2001,19.753,6198.0], 
                     [2002, 20.743,6432.0],
                     [2003,20.831,6695.0], 
                     [2004,23.029,7336.0],
                     [2005,23.579,7248.0],
                     [2006,23.584,7491.0],
                     [2007,25.525,8161.0], 
                     [2008,27.731,8578.0],
                     [2009, 29.449,8800.0]])

#creating pandas dataframe
df = pd.DataFrame(my_array, columns = ['Year','US_Spend','Hanging_Suicides'])

"""step 3: Replicating the graph from the website"""

#Max and MIn values are created to create the scale and axis ticks
MaxSpendLimit = int(df.US_Spend.max() + 3)
MinSpendLimit = int(df.US_Spend.min() -3 )

MaxHangLimit = int (df.Hanging_Suicides.max() + 300)
MinHangLimit = int(df.Hanging_Suicides.min() -300)

################################################

#Creating figure and axis

fig,ax = plt. subplots() # creating figure and subplots

#creating US -Spening vs Year
line1, =ax.plot(df.Year, df.US_Spend,color="red",marker="D") 
ax.set_ylabel("US Spending in Years",color="red",fontsize=20)  #labeling the y axis

#adding ticks
ax.set_yticks(np.arange(MinSpendLimit, MaxSpendLimit,5)) #creating y ticks
ax.set_xticks(np.arange((df.Year.min()-1),df.Year.max()+1,1))# creating x ticks
ax.tick_params(axis ='y',colors='red', which='both') #y axis ticks 



#Creating twin axis
ax2=ax.twinx()
# make a plot with different y-axis using second axis object
line2, = ax2.plot(df.Year, df.Hanging_Suicides, marker = 'o',  color = 'black') #creating haning suicide twin axis
ax2.set_yticks(np.arange(4000, 12000, 2000)) #creating y ticks for twin axis


ax2.set_ylabel("Hanging Suicides",color="black",fontsize=14, rotation= 270) #creates labeling hanging suicides 
secax = ax.secondary_xaxis('top') #adding secondary y axis
secax.set_xticks(np.arange((df.Year.min()-1),df.Year.max()+1,1))#setting x ticks


fig.legend((line1,line2), ('US Spending in Years', 'Hanging Suicides'),bbox_to_anchor=(0.4, 0), loc = 8, borderaxespad= 2, frameon=False)# putting legend to the axis


#making the plot bigger
fig.set_figwidth(20) 
fig.set_figheight(10)

#adding grids
plt.grid(True)

#adding the subtitle
fig.suptitle('US Spending on science and technology \n correlates with \n Sucides by hangng, strangulation and suffocation \n\n\n\n', color = 'red', fontsize= 16)

#showing the plot
plt.show()

"""### **Question  2**

step 1: Importing necessary libraries
"""

from sklearn import datasets
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.lines as line

"""step 2: dwonloading Iris dataset and converting to numpy array"""

iris_data = datasets.load_iris()#downloading iris data
iris = np.array(iris_data) #creating numpy array

"""Step 3: data preprocessing
Creating data sets for flower categor and features for satosa, virginca, and versicola

---


"""

Flower_category = iris_data.target #getting Flower_category name
Features = iris_data.data #getting features from the data


FlowerArray = [] #contains all flowers features
#flower1 = []
#flower2 =[]
#flower3 =[]

sl =[] #sepal length array
sw =[] #sepal width array
pl =[] #petal length array
pw =[] #petal width array

sasl =[] #satosa sepal lengh
sasw = [] #satosa sepal width
sapl =[] #satosa petal length
sapw = [] #satosa petal width

vesl =[] #versicola sepal length
vesw = [] #versicoal sepal width
vepl =[] #versicola petal length
vepw = [] #versicola petal width

visl =[] #virginica sepal length
visw = [] #virginica sepal width
vipl =[] #virginica petal length
vipw = []  #virginica petal width


###Creating arrays of features for different flowers using for loops
#####################################################################


for x in range (len(Features)):
    arrx = np.append(iris_data.data[x], iris_data.target[x]) #arryx is a temporary food
    FlowerArray.append(arrx)


#inserting data to different array 
#satosa = 0, vesl
for arr in FlowerArray:
  if arr[4] == 0: 
    #flower1.append(arr)
    sasl.append(arr[0])
    sasw.append(arr[1])
    sapl.append(arr[2])
    sapw.append(arr[3])
  
  elif arr[4] == 1:
    #flower2.append(arr)
    flower1.append(arr)
    vesl.append(arr[0])
    vesw.append(arr[1])
    vepl.append(arr[2])
    vepw.append(arr[3])


  elif arr[4] ==2:
    #flower3.append(arr)
    visl.append(arr[0])
    visw.append(arr[1])
    vipl.append(arr[2])
    vipw.append(arr[3])

  sl.append(arr[0])
  sw.append(arr[1])
  pl.append(arr[2])
  pw.append(arr[3])

"""Step 4: Creating Plots"""

###creating sublots

###################Creating histograms around the cornesrs################
fig, ax = plt.subplots(4, 4, figsize=(10, 12))
ax[0 ,0].hist(sl,edgecolor = "black")
ax[1,1].hist(sw, edgecolor = "black")
ax[2,2].hist(pl, edgecolor = "black")
ax[3,3].hist(pw, edgecolor = "black")


######################Ceating scatter plots################################
ax[0, 1].scatter(sasw, sasl, edgecolors='black')
ax[0, 1].scatter(vesw, vesl, color = 'red', edgecolors='black')
ax[0, 1].scatter(visw, visl,  color = 'green', edgecolors='black'  )


ax[0, 2].scatter(sapl, sasl, edgecolors='black')
ax[0, 2].scatter(vepl, vesl, color = 'red', edgecolors='black')
ax[0, 2].scatter(vipl, visl, color = 'green', edgecolors='black')

ax[0, 3].scatter(sapw, sasl, edgecolors='black')
ax[0, 3].scatter(vepw, vesl, color = 'red', edgecolors='black')
ax[0, 3].scatter(vipw, visl, color = 'green', edgecolors='black')


ax[1, 0].scatter(sasl, sasw, edgecolors='black')
ax[1, 0].scatter(vesl, vesw, color = 'red', edgecolors='black')
ax[1, 0].scatter(visl, visw, color = 'green', edgecolors='black')

ax[1, 2].scatter(sapl, sasw, edgecolors='black')
ax[1, 2].scatter( vepl, vesw, color = 'red', edgecolors='black')
ax[1, 2].scatter( vipl, visw, color = 'green', edgecolors='black'  )

ax[1, 3].scatter( sapw, sasw, edgecolors='black')
ax[1, 3].scatter(vepw, vesw, color = 'red', edgecolors='black')
ax[1, 3].scatter( vipw, visw, color = 'green', edgecolors='black')





ax[2, 0].scatter(sasl, sapl, edgecolors='black')
ax[2, 0].scatter(vesl, vepl, color = 'red', edgecolors='black')
ax[2, 0].scatter(visl, vipl, color = 'green', edgecolors='black')

ax[2, 1].scatter( sasw, sapl, edgecolors='black')
ax[2, 1].scatter(  vesw,  vepl,color = 'red', edgecolors='black')
ax[2, 1].scatter(  visw, vipl, color = 'green', edgecolors='black')

ax[2, 3].scatter( sapl, sapw, edgecolors='black')
ax[2, 3].scatter(vepl, vepw, color = 'red', edgecolors='black')
ax[2, 3].scatter( vipl, vipw, color = 'green', edgecolors='black')




ax[3, 0].scatter(sasl, sapw, edgecolors='black')
ax[3, 0].scatter(vesl, vepw, color = 'red', edgecolors='black')
ax[3, 0].scatter(visl, vipw, color = 'green', edgecolors='black')

ax[3, 1].scatter( sasw, sapw, edgecolors='black')
ax[3, 1].scatter(  vesw,  vepw,color = 'red', edgecolors='black')
ax[3, 1].scatter(  visw, vipw, color = 'green', edgecolors='black')

ax[3, 2].scatter( sapl, sapw, edgecolors='black')
ax[3, 2].scatter(vepl, vepw, color = 'red', edgecolors='black')
ax[3, 2].scatter( vipl, vipw, color = 'green', edgecolors='black')


##creating y lables#######################
ax[0,0].set_ylabel('sepal length (cm)')
ax[1,0].set_ylabel('sepal length (cm)')
ax[2,0].set_ylabel('sepal length (cm)')
ax[3,0].set_ylabel('sepal length (cm)')
ax[3,0].set_xlabel('sepal length (cm)')
ax[3,1].set_xlabel('sepal width (cm)')
ax[3,2].set_xlabel('petal length (cm)')
ax[3,3].set_xlabel('petal width (cm)')

###########creating legend##############################
line1 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="red")#satosa legend
line2 = line.Line2D(range(1), range(1), color="white", marker='o',markerfacecolor="green")#virginica legend
line3 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="blue")# versicola legend
fig.legend((line1,line2,line3),('Versicola','Virginica', 'Satosa'),numpoints=1, loc=8, fontsize = 14)


###########showing the plot################################
plt.show()



"""### **Question  3**"""

from matplotlib import axes
import random

url = 'https://raw.githubusercontent.com/pratoolbharti/NIU/master/Applied_Machine_Learning_S20/Homework-1/mpg.csv'# downloading the data
df1 = pd.read_csv(url) #converting the data to pandas data frame

fig, axes = plt.subplots(2,2,figsize=(22, 22)) #creating subplots


####################### Creating Plot 1##################################################################
colors = {'f':'orange', 'r':'skyblue', '4':'black'} #creating colors for different types of drives

axes[0,0].scatter(df1.displ,df1.hwy, c=df1.drv.map(colors), s = 100) #creating scatterplot
axes[0,0].set_ylabel('fuel economy (mpg)')#adding label to the y axis
axes[0,0].set_xlabel('displacement')#adding label to the x axis
axes[0,0].set_title("Original plot")#creating title
#creating legends
line1 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="orange") 
line2 = line.Line2D(range(1), range(1), color="white", marker='o',markerfacecolor="skyblue")
line3 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="black")
axes[0,0].legend((line1,line2,line3),('FWD','RWD', '4WD'),title="Drive Train", numpoints=1, loc=1)
#########################################################################################################

####################### Creating Plot  2 ##################################################################
#same stapes as plot 1 with low opacity
colors1 = {'f':'orange', 'r':'skyblue', '4':'black'}


axes[0,1].scatter(df1.displ,df1.hwy, c=df1.drv.map(colors1), alpha= 0.3, s=100) #alpha is used to create trasparancy
axes[0,1].set_ylabel('fuel economy (mpg)')
axes[0,1].set_xlabel('displacement')
axes[0,1].legend()
axes[0,1].set_title("Plot with trasparent points for occlusion")



line1 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="orange")
line2 = line.Line2D(range(1), range(1), color="white", marker='o',markerfacecolor="skyblue")
line3 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="black")
axes[0,1].legend((line1,line2,line3),('FWD','RWD', '4WD'),title="Drive Train", numpoints=1, loc=1)

#########################################################################################################


####################### Creating Plot  3 ##################################################################
#same stapes as plot 1 and adding jitter


axes[1,0].scatter(df1.displ + random.random(),df1.hwy + random.random()*5, c=df1.drv.map(colors1), alpha= 0.3, s=100) #random is used to add jitter
axes[1,0].set_ylabel('fuel economy (mpg)')
axes[1,0].set_xlabel('displacement')
axes[1,0].legend()
axes[1,0].set_title("Plot with trasparent points and minimum jitter")


line1 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="orange")
line2 = line.Line2D(range(1), range(1), color="white", marker='o',markerfacecolor="skyblue")
line3 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="black")
axes[1,0].legend((line1,line2,line3),('FWD','RWD', '4WD'),title="Drive Train", numpoints=1, loc=1)
#########################################################################################################


####################### Creating Plot  3 ##################################################################
#same stapes as plot 1 and adding more jitter


axes[1,1].scatter(df1.displ * random.random(),df1.hwy + random.random()*5,  c=df1.drv.map(colors1), alpha= 0.3, s=100)
axes[1,1].set_ylabel('fuel economy (mpg)')
axes[1,1].set_xlabel('displacement')
axes[1,1].legend()
axes[1,1].set_title("Plot with too much jitter makes the plot hard to understand")


line1 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="orange")
line2 = line.Line2D(range(1), range(1), color="white", marker='o',markerfacecolor="skyblue")
line3 = line.Line2D(range(1), range(1), color="white", marker='o', markerfacecolor="black")
axes[1,1].legend((line1,line2,line3),('FWD','RWD', '4WD'),title="Drive Train", numpoints=1, loc=1)

#########################################################################################################

plt.show()